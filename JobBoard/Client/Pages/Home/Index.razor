@page "/searchs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Search Listings</h3>
<br />
<a href="/listings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>    
    Search Listings
</a>
<br />
<br />

@if (Searchs == null)
{
    <div class="alert alert-info">Loading Jobs...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Listing</th>
                <th>Filter</th>
                <th>Location</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var search in Searchs)
            {
            <tr>
                <td>@search.Listing.Name</td>

                <td>@search.Location.Name</td>
                <td>
                    <a href="/models/view/@search.SearchId" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/models/edit/@search.SearchId" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(search.SearchId))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Search> Searchs;

    protected async override Task OnInitializedAsync()
    {
        Searchs = await _client.GetFromJsonAsync<List<Search>>($"{Endpoints.SearchsEndpoint}");
    }

    async Task Delete(int searchId)
    {
        var search = Searchs.First(q => q.SearchId == searchId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {search.SearchId}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.SearchsEndpoint}/{searchId}");
            await OnInitializedAsync();
        }
    }
}
