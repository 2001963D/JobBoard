@inject HttpClient _client 


<EditForm Model="@appointment" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Listing: </label>
        <div>
            <InputSelect @bind-Value="appointment.ListingId" class="form-control">
                <option value="">--Select Vehicle--</option>
                @if (Listings != null)
                {
                    foreach (var listing in Listings)
                    {
                        <option value="@listing.Id">
                            @listing.Name - @listing.Location.Name - @listing.Employer.FirstName @listing.Employer.LastName
                        </option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => appointment.ListingId)" />
        </div>
    </div>



    <div class="form-group">
        <label>Date Out: </label>
        <div>
            <InputDate @bind-Value="@appointment.DateOut" class="form-control" />
            <ValidationMessage For="@(() => appointment.DateOut)" />
        </div>
    </div>

    @if (appointment.Id > 0)
    {
        <div class="form-group">
            <label>Date In: </label>
            <div>
                <InputDate @bind-Value="@appointment.DateIn" class="form-control" />
                <ValidationMessage For="@(() => appointment.DateIn)" />
            </div>
        </div>
    }

    <br />
    @if (!Disabled) {  
    <button type="submit" class="btn btn-success btn-block">
        Book Appointment
    </button>
    }
    <BackToList Target="appointments" />
    
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Appointment appointment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Listing> Listings;
    private IList<Location> Locations;
    private IList<Employer> Employers;

    protected async override Task OnInitializedAsync()
    {
        Listings = await _client.GetFromJsonAsync<List<Listing>>($"{Endpoints.ListingsEndpoint}");
        Locations = await _client.GetFromJsonAsync<List<Location>>($"{Endpoints.LocationsEndpoint}");
        Employers = await _client.GetFromJsonAsync<List<Employer>>($"{Endpoints.EmployersEndpoint}");
        //appointment.DateOut = DateTime.Now;
    }
}
