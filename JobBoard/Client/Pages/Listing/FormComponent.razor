@inject HttpClient _client

<EditForm Model="@listing" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Title: </label>
            <div>
                <InputText @bind-Value="listing.Name" class="form-control" />
                <ValidationMessage For="@(() => listing.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="listing.Description" class="form-control" />
                <ValidationMessage For="@(() => listing.Description)" />
            </div>
        </div>

        <div class="form-group">
            <label>Wage ($): </label>
            <div>
                <InputNumber @bind-Value="listing.Wage" class="form-control" />
                <ValidationMessage For="@(() => listing.Wage)" />
            </div>
        </div>


        <div class="form-group">
            <label>Employer Name: </label>
            <div>
                <InputSelect @bind-Value="listing.EmployerId" class="form-control">
                    <option value="">--Select Employer--</option>
                    @if (Employers != null)
                    {
                        foreach (var ename in Employers)
                        {
                            <option value="@ename.Id">@ename.FirstName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => listing.EmployerId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Location: </label>
            <div>
                <InputSelect @bind-Value="listing.LocationId" class="form-control">
                    <option value="">--Select Location--</option>
                    @if (Locations != null)
                    {
                        foreach (var lname in Locations)
                        {
                            <option value="@lname.LocationId">@lname.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => listing.LocationId)" />
            </div>
        </div>

        <div class="form-control-file">
            <label for="image">Choose Profile Picture:</label>
            <InputFile OnChange="OnFileChange" />
        </div>

    </fieldset>
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }
        <BackToList Target="listings" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Listing listing { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Employer> Employers;
    private IList<Location> Locations;
    private IList<Review> Reviews;

    protected async override Task OnInitializedAsync()
    {
        Employers = await _client.GetFromJsonAsync<List<Employer>>($"{Endpoints.EmployersEndpoint}");
        Locations = await _client.GetFromJsonAsync<List<Location>>($"{Endpoints.LocationsEndpoint}");
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = " image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        listing.Image = imageData;

    }
}


